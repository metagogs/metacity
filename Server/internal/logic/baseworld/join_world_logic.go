package baseworld

import (
	"context"

	"github.com/metagogs/gogs/gslog"
	"github.com/metagogs/gogs/session"
	"github.com/metagogs/gogs/utils/slicex"
	"github.com/metagogs/metacity/internal/message"
	"github.com/metagogs/metacity/internal/svc"
	"github.com/metagogs/metacity/model"
	"go.uber.org/zap"
)

type JoinWorldLogic struct {
	ctx     context.Context
	svcCtx  *svc.ServiceContext
	session *session.Session
	*zap.Logger
}

func NewJoinWorldLogic(ctx context.Context, svcCtx *svc.ServiceContext, sess *session.Session) *JoinWorldLogic {
	return &JoinWorldLogic{
		ctx:     ctx,
		svcCtx:  svcCtx,
		session: sess,
		Logger:  gslog.NewLog("join_world_logic"),
	}
}

func (l *JoinWorldLogic) Handler(in *model.JoinWorld) {
	uid := l.svcCtx.SF.Generate().String()
	// set session uid, uid is different with the session id, one uid mayby have many session, uid means the user id
	// Under normal conditions, the uid is generated by login api.
	l.session.SetUID(uid)
	// add uid to the world
	_ = l.svcCtx.Group.AddUser(l.ctx, uid)
	// if session is closed, remove uid from the world
	users := l.svcCtx.Group.GetUsers(l.ctx)
	users = slicex.RemoveSliceItem(users, uid)

	l.session.OnClose(func(id int64) {
		_ = l.svcCtx.Group.RemoveUser(l.ctx, uid)
		// notifiy other users the user is offline
		leaveMsg := &model.LeaveWorldNotifiy{
			Uid: uid,
		}
		session.BroadcastMessage(users, leaveMsg, nil)
	})

	// l.session.SendMessage(&model.JoinWorldSuccess{
	// 	Uids: users,
	// })
	// this code is same with the below code
	// but use the message.SendJoinWorldSuccess is better
	// because it not use the reflect

	if err := message.SendJoinWorldSuccess(l.session, &model.JoinWorldSuccess{
		Uid:  uid,
		Uids: users,
	}); err != nil {
		l.Error("send message", zap.Error(err))
	}

	msg := &model.JoinWorldNotifiy{
		Uid: uid,
	}

	session.BroadcastMessage(users, msg, nil)

	// for _, u := range users {
	// 	sess, _ := session.GetSessionByUID(u, nil)

	// 	if len(sess) > 0 {
	// 		if s, err := session.GetSessionByID(sess[0]); err == nil {
	// 			_ = message.SendJoinWorldNotifiy(s, msg)
	// 		}
	// 	}
	// }
}
